import fs from 'fs/promises';
import cloneDeep from 'lodash.clonedeep';
import path from 'path';
import yaml from 'yaml';

/**
 *
 * @param {string} sourceDir Assumed to exist already
 * @param {string} libDir Assumed to exist already
 */
export const buildSeriesSource = async (sourceDir, libDir) => {
	const connectionName = 'series_demo_source';
	const connection = {
		name: connectionName,
		type: 'faker',
		options: { seed: 'evidence-series-demo' }
	};
	await fs.writeFile(
		path.join(sourceDir, 'connection.yaml'),
		`
# This file was automatically generated by @evidence-dev/faker-datasource
# This source is designed to contain examples for many series perumtations
${yaml.stringify(connection)}
`.trim()
	);

	const baseNumericTable = {
		rows: 100,
		fuzz: 0,
		series: {
			type: 'numeric',
			columns: {
				x: {
					type: 'number'
				},
				y: {
					category: 'number',
					item: 'int',
					options: [
						{
							min: 0,
							max: 1000
						}
					]
				},
				series: {
					count: 4
				}
			}
		}
	};

	const nameMods = {
		xGaps: 'xgaps',
		yNulls: 'ynulls',
		seriesAlwaysExists: 'seriesgaps'
	};

	/** @type {*} */
	let queries = {};

	for (const xGaps of [false, true]) {
		for (const yNulls of [false, true]) {
			for (const seriesAlwaysExists of [false, true]) {
				let tableName = 'numeric_series';
				const table = cloneDeep(baseNumericTable);
				if (xGaps) {
					table.series.columns.x.gaps = true;
					tableName += `_${nameMods['xGaps']}`;
				}
				if (yNulls) {
					table.series.columns.y.nulls = true;
					tableName += `_${nameMods['yNulls']}`;
				}
				if (!seriesAlwaysExists) {
					table.series.columns.series.alwaysExists = false;
					tableName += `_${nameMods['seriesAlwaysExists']}`;
				}

				await fs.writeFile(path.join(sourceDir, `${tableName}.yaml`), yaml.stringify(table));

				let q = queries;
				if (!q['numeric_series']) q['numeric_series'] = {};
				q = q['numeric_series'];
				if (!q[xGaps.toString()]) q[xGaps.toString()] = {};
				q = q[xGaps.toString()];
				if (!q[yNulls.toString()]) q[yNulls.toString()] = {};
				q = q[yNulls.toString()];
				if (!q[seriesAlwaysExists.toString()]) q[seriesAlwaysExists.toString()] = {};
				q = q[seriesAlwaysExists.toString()];

				q['text'] = `SELECT * FROM ${connectionName}.${tableName}`;
				q['store'] = `new QueryStore("${q['text']}", query)`;
			}
		}
	}
	await fs.writeFile(
		path.join(libDir, 'faker-data-queries.js'),
		`
import {QueryStore} from "@evidence-dev/query-store";
import {query} from "@evidence-dev/universal-sql/client-duckdb";
export const fakerSeries = ${JSON.stringify(queries, null, 2)
			.replaceAll(/"(new QueryStore.+)"/g, '$1')
			.replaceAll('\\"', '"')}`
	);
};
