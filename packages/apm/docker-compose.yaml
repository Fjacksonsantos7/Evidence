version: '3.9'

services:
  tempo:
    image: grafana/tempo:latest
    command: [ "-config.file=/etc/tempo.yaml" ]
    volumes:
      - ./cfg/tempo.yaml:/etc/tempo.yaml
    ports:
      - "3200:3200"   # tempo
      - "9095:9095" # tempo grpc
      - "4317:4317"  # otlp grpc
      - "4318:4318"  # otlp http

  # prometheus:
  #   image: prom/prometheus:latest
  #   command:
  #     - --config.file=/etc/prometheus.yaml
  #     - --web.enable-remote-write-receiver
  #     - --enable-feature=exemplar-storage
  #   volumes:
  #     - ./cfg/prometheus.yaml:/etc/prometheus.yaml
  #   ports:
  #     - "9090:9090"

  grafana:
    image: grafana/grafana:10.2.2
    volumes:
      - ./cfg/grafana-datasources.yaml:/etc/grafana/provisioning/datasources/datasources.yaml
    environment:
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
      - GF_AUTH_DISABLE_LOGIN_FORM=true
      - GF_FEATURE_TOGGLES_ENABLE=traceqlEditor traceQLStreaming metricsSummary
    ports:
      - "3000:3000"


#### Zrok

  # set file ownership
  zrok-init:
    image: busybox
    # matches uid:gid of "nobody" in zrok container image
    command: chown -Rc 65534:65534 /mnt/.zrok
    user: root
    volumes:
      - ./zrok:/mnt/.zrok

  # enable zrok environment
  zrok-enable:
    image: docker.io/openziti/zrok
    depends_on:
      zrok-init:
        condition: service_completed_successfully
    entrypoint: zrok-enable.bash
    volumes:
      - ./zrok:/mnt
    env_file: .env
    environment:
      STATE_DIRECTORY: /mnt
      ZROK_API_ENDPOINT: 
      ZROK_ENVIRONMENT_NAME: docker@one
  
  zrok-share:
    image: docker.io/openziti/zrok
    restart: unless-stopped
    entrypoint: zrok-share.bash
    depends_on:
      zrok-enable:
        condition: service_completed_successfully
    volumes:
      - ./zrok:/mnt
      - ./zrok/tempo.json:/mnt/.zrok/reserved.json
    environment:
      # internal configuration
      STATE_DIRECTORY: /mnt  # zrok homedir in container
      
      # most relevant options
      ZROK_UNIQUE_NAME: evidencebriantempo  # web, caddy, drive, proxy
      ZROK_BACKEND_MODE: proxy  # web, caddy, drive, proxy
      ZROK_TARGET: http://tempo:4318  # backend target, is a path in container filesystem unless proxy mode
      ZROK_INSECURE: true   # "--insecure" if proxy target has unverifiable TLS server certificate
      # ZROK_OAUTH_PROVIDER:  # google, github
      # ZROK_OAUTH_EMAILS:    # space-separated list of OAuth email addresses or @domain.tld to allow
      # ZROK_BASIC_AUTH:      # username:password, mutually-exclusive with ZROK_OAUTH_PROVIDER

      # least relevant options
      ZROK_VERBOSE:           # "--verbose"
      ZROK_SHARE_OPTS:        # additional arguments to "zrok share public" command
      ZROK_FRONTENDS:         # "public"
      PFXLOG_NO_JSON: "true"  # suppress JSON logging format
  
  zrok-share-grafana:
    image: docker.io/openziti/zrok
    restart: unless-stopped
    entrypoint: zrok-share.bash
    depends_on:
      zrok-enable:
        condition: service_completed_successfully
    volumes:
      - ./zrok:/mnt
      - ./zrok/grafana.json:/mnt/.zrok/reserved.json
    environment:
      # internal configuration
      STATE_DIRECTORY: /mnt  # zrok homedir in container
      
      # most relevant options
      ZROK_UNIQUE_NAME: evidencebriangrafana
      ZROK_BACKEND_MODE: web  # web, caddy, drive, proxy
      ZROK_TARGET: http://grafana:3000  # backend target, is a path in container filesystem unless proxy mode
      ZROK_INSECURE: true   # "--insecure" if proxy target has unverifiable TLS server certificate
      # ZROK_OAUTH_PROVIDER: google  # google, github
      # ZROK_OAUTH_EMAILS: "@evidence.dev"   # space-separated list of OAuth email addresses or @domain.tld to allow
      # ZROK_BASIC_AUTH:  evidence:evidence    # username:password, mutually-exclusive with ZROK_OAUTH_PROVIDER

      # least relevant options
      ZROK_VERBOSE:           # "--verbose"
      ZROK_SHARE_OPTS:        # additional arguments to "zrok share public" command
      ZROK_FRONTENDS:         # "public"
      PFXLOG_NO_JSON: "true"  # suppress JSON logging format